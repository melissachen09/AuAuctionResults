#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

console.log('🚀 AU Auction Results - 自动部署脚本');
console.log('=====================================\n');

// 生成 API Secret
const generateApiSecret = () => {
  return crypto.randomBytes(32).toString('base64');
};

// 执行命令的辅助函数
const exec = (command, options = {}) => {
  try {
    return execSync(command, { 
      stdio: 'inherit',
      encoding: 'utf8',
      ...options 
    });
  } catch (error) {
    console.error(`❌ 命令执行失败: ${command}`);
    process.exit(1);
  }
};

// 检查是否在项目根目录
const checkProjectRoot = () => {
  if (!fs.existsSync('package.json')) {
    console.error('❌ 请在项目根目录运行此脚本');
    process.exit(1);
  }
  console.log('✅ 项目目录检查通过\n');
};

// 生成环境变量
const generateEnvVars = () => {
  console.log('🔐 生成环境变量...');
  const apiSecret = generateApiSecret();
  
  // 创建 .env.production
  const envContent = `# Generated by auto-deploy script
API_SECRET="${apiSecret}"
NODE_ENV="production"

# Database URL will be added automatically by Vercel Postgres
# DATABASE_URL will be set after creating Vercel Postgres

# App URL will be set after deployment
# NEXT_PUBLIC_APP_URL will be set after deployment
`;

  fs.writeFileSync('.env.production', envContent);
  console.log('✅ 环境变量已生成\n');
  
  return { apiSecret };
};

// 创建 Vercel 配置
const createVercelConfig = () => {
  console.log('📝 创建 Vercel 配置...');
  
  // 检查 vercel.json 是否已存在
  if (!fs.existsSync('vercel.json')) {
    const vercelConfig = {
      buildCommand: "prisma generate && next build",
      installCommand: "npm install",
      framework: "nextjs",
      outputDirectory: ".next",
      regions: ["syd1"],
      env: {
        DATABASE_URL: "@database_url",
        API_SECRET: "@api_secret",
        NODE_ENV: "production"
      },
      build: {
        env: {
          DATABASE_URL: "@database_url"
        }
      },
      functions: {
        "src/app/api/scrape/route.ts": {
          maxDuration: 300
        }
      }
    };
    
    fs.writeFileSync('vercel.json', JSON.stringify(vercelConfig, null, 2));
    console.log('✅ vercel.json 已创建');
  } else {
    console.log('ℹ️  vercel.json 已存在，跳过创建');
  }
  
  console.log('');
};

// 主部署函数
const deploy = async () => {
  try {
    // 步骤 1: 检查环境
    checkProjectRoot();
    
    // 步骤 2: 生成环境变量
    const { apiSecret } = generateEnvVars();
    
    // 步骤 3: 创建 Vercel 配置
    createVercelConfig();
    
    // 步骤 4: 登录 Vercel（如果需要）
    console.log('🔑 检查 Vercel 登录状态...');
    try {
      execSync('vercel whoami', { stdio: 'pipe' });
      console.log('✅ 已登录 Vercel\n');
    } catch {
      console.log('需要登录 Vercel...');
      exec('vercel login');
    }
    
    // 步骤 5: 部署项目
    console.log('🚀 开始部署到 Vercel...');
    console.log('请按照提示操作：');
    console.log('- Set up and deploy: Y');
    console.log('- Which scope: 选择你的账号');
    console.log('- Link to existing project?: N (如果是首次部署)');
    console.log('- Project name: au-auction-results (或自定义)');
    console.log('- In which directory: ./ (当前目录)');
    console.log('- Want to modify settings?: N\n');
    
    // 部署到生产环境
    exec('vercel --prod');
    
    console.log('\n✅ 部署完成！\n');
    
    // 步骤 6: 设置环境变量
    console.log('🔧 设置生产环境变量...');
    exec(`vercel env add API_SECRET production < .env.production`);
    
    // 步骤 7: 部署后指引
    console.log('\n📋 部署后步骤：\n');
    console.log('1. 创建 Vercel Postgres 数据库：');
    console.log('   - 访问 https://vercel.com/dashboard');
    console.log('   - 选择你的项目');
    console.log('   - 点击 "Storage" → "Create Database" → "Postgres"');
    console.log('   - 选择 Sydney 区域\n');
    
    console.log('2. 运行数据库迁移：');
    console.log('   vercel env pull .env.production.local');
    console.log('   npx prisma migrate deploy\n');
    
    console.log('3. 配置 GitHub Actions (可选)：');
    console.log('   在 GitHub 仓库 Settings → Secrets 中添加：');
    console.log(`   - API_SECRET: ${apiSecret}`);
    console.log('   - DATABASE_URL: (从 Vercel 复制)');
    console.log('   - API_URL: (你的 Vercel 应用 URL)\n');
    
    console.log('4. 测试你的应用：');
    console.log('   vercel open');
    
    // 保存部署信息
    const deployInfo = {
      deployedAt: new Date().toISOString(),
      apiSecret: apiSecret,
      projectName: 'au-auction-results',
      tips: [
        '请妥善保管 API_SECRET',
        '记得创建 Vercel Postgres 数据库',
        '运行数据库迁移后才能正常使用'
      ]
    };
    
    fs.writeFileSync('deployment-info.json', JSON.stringify(deployInfo, null, 2));
    console.log('\n💾 部署信息已保存到 deployment-info.json');
    
  } catch (error) {
    console.error('\n❌ 部署失败:', error.message);
    process.exit(1);
  }
};

// 清理函数
process.on('SIGINT', () => {
  console.log('\n\n🛑 部署已取消');
  process.exit(0);
});

// 运行部署
deploy();